"""Report visualization utilities."""

import logging
import os
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.backends.backend_pdf import PdfPages
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.io as pio

from .chart_generator import ChartGenerator
from logging.report_generator import ReportGenerator

logger = logging.getLogger(__name__)

class ReportVisualizer:
    """Generate visual reports from system data."""
    
    def __init__(self):
        """Initialize report visualizer."""
        self.chart_generator = ChartGenerator()
        self.report_generator = ReportGenerator()
        
        # Report configuration
        self.config = {
            'output_directory': 'reports',
            'chart_style': 'seaborn-v0_8',
            'color_palette': 'husl',
            'figure_size': (12, 8),
            'dpi': 300,
            'font_size': 12
        }
        
        # Ensure output directory exists
        os.makedirs(self.config['output_directory'], exist_ok=True)
        
        logger.info("Report visualizer initialized")
    
    async def generate_comprehensive_report(
        self, 
        report_type: str,
        start_date: datetime,
        end_date: datetime,
        output_format: str = 'pdf'
    ) -> str:
        """
        Generate comprehensive visual report.
        
        Args:
            report_type: Type of report ('daily', 'weekly', 'monthly', 'custom')
            start_date: Report start date
            end_date: Report end date
            output_format: Output format ('pdf', 'html', 'png')
            
        Returns:
            Path to generated report file
        """
        try:
            # Generate report data
            report_data = await self.report_generator.generate_access_report(
                start_date, end_date
            )
            
            # Generate filename
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{report_type}_report_{timestamp}"
            
            if output_format == 'pdf':
                return await self._generate_pdf_report(report_data, filename)
            elif output_format == 'html':
                return await self._generate_html_report(report_data, filename)
            elif output_format == 'png':
                return await self._generate_png_report(report_data, filename)
            else:
                raise ValueError(f"Unsupported output format: {output_format}")
                
        except Exception as e:
            logger.error(f"Error generating comprehensive report: {e}")
            raise
    
    async def _generate_pdf_report(self, report_data: Dict[str, Any], filename: str) -> str:
        """Generate PDF report with multiple charts."""
        try:
            filepath = os.path.join(self.config['output_directory'], f"{filename}.pdf")
            
            with PdfPages(filepath) as pdf:\n                # Title page\n                self._create_title_page(pdf, report_data)\n                \n                # Summary page\n                self._create_summary_page(pdf, report_data)\n                \n                # Access timeline chart\n                self._create_access_timeline_page(pdf, report_data)\n                \n                # Success rate analysis\n                self._create_success_rate_page(pdf, report_data)\n                \n                # Location usage analysis\n                self._create_location_usage_page(pdf, report_data)\n                \n                # Person activity analysis\n                self._create_person_activity_page(pdf, report_data)\n                \n                # Time-based analysis\n                self._create_time_analysis_page(pdf, report_data)\n                \n                # Security incidents\n                self._create_security_incidents_page(pdf, report_data)\n                \n                # System performance\n                self._create_performance_page(pdf, report_data)\n            \n            logger.info(f\"PDF report generated: {filepath}\")\n            return filepath\n            \n        except Exception as e:\n            logger.error(f\"Error generating PDF report: {e}\")\n            raise\n    \n    async def _generate_html_report(self, report_data: Dict[str, Any], filename: str) -> str:\n        \"\"\"Generate HTML report with interactive charts.\"\"\"\n        try:\n            filepath = os.path.join(self.config['output_directory'], f\"{filename}.html\")\n            \n            # Generate interactive charts\n            charts = await self._generate_interactive_charts(report_data)\n            \n            # Create HTML content\n            html_content = self._create_html_template(report_data, charts)\n            \n            # Write to file\n            with open(filepath, 'w', encoding='utf-8') as f:\n                f.write(html_content)\n            \n            logger.info(f\"HTML report generated: {filepath}\")\n            return filepath\n            \n        except Exception as e:\n            logger.error(f\"Error generating HTML report: {e}\")\n            raise\n    \n    async def _generate_png_report(self, report_data: Dict[str, Any], filename: str) -> str:\n        \"\"\"Generate PNG dashboard image.\"\"\"\n        try:\n            filepath = os.path.join(self.config['output_directory'], f\"{filename}.png\")\n            \n            # Create dashboard layout\n            fig = plt.figure(figsize=(20, 16))\n            \n            # Create subplots\n            gs = fig.add_gridspec(4, 3, hspace=0.3, wspace=0.3)\n            \n            # Access timeline\n            ax1 = fig.add_subplot(gs[0, :])\n            self._plot_access_timeline(ax1, report_data)\n            \n            # Success rate pie chart\n            ax2 = fig.add_subplot(gs[1, 0])\n            self._plot_success_rate_pie(ax2, report_data)\n            \n            # Location usage bar chart\n            ax3 = fig.add_subplot(gs[1, 1])\n            self._plot_location_usage(ax3, report_data)\n            \n            # Hourly activity\n            ax4 = fig.add_subplot(gs[1, 2])\n            self._plot_hourly_activity(ax4, report_data)\n            \n            # Weekly activity heatmap\n            ax5 = fig.add_subplot(gs[2, :])\n            self._plot_weekly_heatmap(ax5, report_data)\n            \n            # Key metrics\n            ax6 = fig.add_subplot(gs[3, 0])\n            self._plot_key_metrics(ax6, report_data)\n            \n            # Top persons\n            ax7 = fig.add_subplot(gs[3, 1])\n            self._plot_top_persons(ax7, report_data)\n            \n            # System health\n            ax8 = fig.add_subplot(gs[3, 2])\n            self._plot_system_health(ax8, report_data)\n            \n            # Add title\n            fig.suptitle(f\"Access Control System Report\\n{report_data.get('period', 'Custom Period')}\", \n                        fontsize=20, fontweight='bold')\n            \n            # Save figure\n            plt.savefig(filepath, dpi=self.config['dpi'], bbox_inches='tight')\n            plt.close(fig)\n            \n            logger.info(f\"PNG report generated: {filepath}\")\n            return filepath\n            \n        except Exception as e:\n            logger.error(f\"Error generating PNG report: {e}\")\n            raise\n    \n    def _create_title_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create title page for PDF report.\"\"\"\n        fig, ax = plt.subplots(figsize=self.config['figure_size'])\n        \n        ax.text(0.5, 0.7, 'Face Recognition System', \n                ha='center', va='center', fontsize=28, fontweight='bold')\n        ax.text(0.5, 0.6, 'Access Control Report', \n                ha='center', va='center', fontsize=20)\n        ax.text(0.5, 0.4, f\"Period: {report_data.get('period', 'Custom')}\", \n                ha='center', va='center', fontsize=16)\n        ax.text(0.5, 0.3, f\"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\", \n                ha='center', va='center', fontsize=14)\n        \n        ax.set_xlim(0, 1)\n        ax.set_ylim(0, 1)\n        ax.axis('off')\n        \n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_summary_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create summary page for PDF report.\"\"\"\n        fig, ax = plt.subplots(figsize=self.config['figure_size'])\n        \n        summary = report_data.get('summary', {})\n        \n        # Create summary text\n        summary_text = f\"\"\"\nREPORT SUMMARY\n\nTotal Access Attempts: {summary.get('total_attempts', 0):,}\nSuccessful Access: {summary.get('successful_attempts', 0):,}\nFailed Access: {summary.get('failed_attempts', 0):,}\nSuccess Rate: {summary.get('success_rate', 0):.1f}%\n\nUnique Persons: {summary.get('unique_persons', 0):,}\nActive Locations: {summary.get('active_locations', 0):,}\n\nPeak Access Hour: {summary.get('peak_hour', 'N/A')}\nBusiest Day: {summary.get('busiest_day', 'N/A')}\n\nAverage Confidence Score: {summary.get('avg_confidence', 0):.2f}\nSecurity Incidents: {summary.get('security_incidents', 0):,}\n\"\"\"\n        \n        ax.text(0.1, 0.9, summary_text, ha='left', va='top', fontsize=14, \n                fontfamily='monospace', transform=ax.transAxes)\n        \n        ax.set_xlim(0, 1)\n        ax.set_ylim(0, 1)\n        ax.axis('off')\n        \n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_access_timeline_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create access timeline page.\"\"\"\n        fig, ax = plt.subplots(figsize=self.config['figure_size'])\n        \n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\n            \n            # Resample by hour\n            hourly_data = df.set_index('timestamp').resample('H').size()\n            \n            ax.plot(hourly_data.index, hourly_data.values, linewidth=2)\n            ax.set_title('Access Activity Timeline', fontsize=16, fontweight='bold')\n            ax.set_xlabel('Time')\n            ax.set_ylabel('Access Count')\n            ax.grid(True, alpha=0.3)\n            \n            # Format x-axis\n            plt.xticks(rotation=45)\n        else:\n            ax.text(0.5, 0.5, 'No access data available', ha='center', va='center')\n            ax.set_title('Access Activity Timeline', fontsize=16, fontweight='bold')\n        \n        plt.tight_layout()\n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_success_rate_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create success rate analysis page.\"\"\"\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=self.config['figure_size'])\n        \n        summary = report_data.get('summary', {})\n        \n        # Success rate pie chart\n        success_count = summary.get('successful_attempts', 0)\n        failed_count = summary.get('failed_attempts', 0)\n        \n        if success_count + failed_count > 0:\n            sizes = [success_count, failed_count]\n            labels = ['Successful', 'Failed']\n            colors = ['#2ca02c', '#d62728']\n            \n            ax1.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n            ax1.set_title('Access Success Rate')\n        else:\n            ax1.text(0.5, 0.5, 'No data available', ha='center', va='center')\n            ax1.set_title('Access Success Rate')\n        \n        # Daily success rate trend\n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\n            df['date'] = df['timestamp'].dt.date\n            \n            daily_stats = df.groupby('date')['access_granted'].agg(['count', 'sum'])\n            daily_stats['success_rate'] = (daily_stats['sum'] / daily_stats['count'] * 100)\n            \n            ax2.plot(daily_stats.index, daily_stats['success_rate'], marker='o')\n            ax2.set_title('Daily Success Rate Trend')\n            ax2.set_xlabel('Date')\n            ax2.set_ylabel('Success Rate (%)')\n            ax2.grid(True, alpha=0.3)\n            plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)\n        else:\n            ax2.text(0.5, 0.5, 'No data available', ha='center', va='center')\n            ax2.set_title('Daily Success Rate Trend')\n        \n        plt.tight_layout()\n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_location_usage_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create location usage analysis page.\"\"\"\n        fig, ax = plt.subplots(figsize=self.config['figure_size'])\n        \n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            location_counts = df['location_name'].value_counts().head(10)\n            \n            location_counts.plot(kind='bar', ax=ax)\n            ax.set_title('Top 10 Most Accessed Locations', fontsize=16, fontweight='bold')\n            ax.set_xlabel('Location')\n            ax.set_ylabel('Access Count')\n            ax.tick_params(axis='x', rotation=45)\n        else:\n            ax.text(0.5, 0.5, 'No location data available', ha='center', va='center')\n            ax.set_title('Location Usage Analysis', fontsize=16, fontweight='bold')\n        \n        plt.tight_layout()\n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_person_activity_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create person activity analysis page.\"\"\"\n        fig, ax = plt.subplots(figsize=self.config['figure_size'])\n        \n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            person_counts = df['person_name'].value_counts().head(10)\n            \n            person_counts.plot(kind='barh', ax=ax)\n            ax.set_title('Top 10 Most Active Persons', fontsize=16, fontweight='bold')\n            ax.set_xlabel('Access Count')\n            ax.set_ylabel('Person')\n        else:\n            ax.text(0.5, 0.5, 'No person data available', ha='center', va='center')\n            ax.set_title('Person Activity Analysis', fontsize=16, fontweight='bold')\n        \n        plt.tight_layout()\n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_time_analysis_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create time-based analysis page.\"\"\"\n        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=self.config['figure_size'])\n        \n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\n            \n            # Hourly distribution\n            hourly_counts = df['timestamp'].dt.hour.value_counts().sort_index()\n            ax1.bar(hourly_counts.index, hourly_counts.values)\n            ax1.set_title('Access by Hour of Day')\n            ax1.set_xlabel('Hour')\n            ax1.set_ylabel('Access Count')\n            \n            # Daily distribution\n            daily_counts = df['timestamp'].dt.day_name().value_counts()\n            day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n            daily_counts = daily_counts.reindex(day_order)\n            ax2.bar(range(len(daily_counts)), daily_counts.values)\n            ax2.set_title('Access by Day of Week')\n            ax2.set_xlabel('Day')\n            ax2.set_ylabel('Access Count')\n            ax2.set_xticks(range(len(daily_counts)))\n            ax2.set_xticklabels([d[:3] for d in daily_counts.index], rotation=45)\n            \n            # Monthly trend (if data spans multiple months)\n            monthly_counts = df['timestamp'].dt.to_period('M').value_counts().sort_index()\n            if len(monthly_counts) > 1:\n                ax3.plot(range(len(monthly_counts)), monthly_counts.values, marker='o')\n                ax3.set_title('Monthly Access Trend')\n                ax3.set_xlabel('Month')\n                ax3.set_ylabel('Access Count')\n                ax3.set_xticks(range(len(monthly_counts)))\n                ax3.set_xticklabels([str(m) for m in monthly_counts.index], rotation=45)\n            else:\n                ax3.text(0.5, 0.5, 'Insufficient data for monthly trend', ha='center', va='center')\n                ax3.set_title('Monthly Access Trend')\n            \n            # Confidence score distribution\n            confidence_scores = df['confidence_score'].dropna()\n            if len(confidence_scores) > 0:\n                ax4.hist(confidence_scores, bins=20, alpha=0.7)\n                ax4.set_title('Confidence Score Distribution')\n                ax4.set_xlabel('Confidence Score')\n                ax4.set_ylabel('Frequency')\n            else:\n                ax4.text(0.5, 0.5, 'No confidence data available', ha='center', va='center')\n                ax4.set_title('Confidence Score Distribution')\n        else:\n            for ax in [ax1, ax2, ax3, ax4]:\n                ax.text(0.5, 0.5, 'No data available', ha='center', va='center')\n        \n        plt.tight_layout()\n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_security_incidents_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create security incidents page.\"\"\"\n        fig, ax = plt.subplots(figsize=self.config['figure_size'])\n        \n        security_incidents = report_data.get('security_incidents', [])\n        \n        if security_incidents:\n            # Create incident summary\n            incident_types = {}\n            for incident in security_incidents:\n                incident_type = incident.get('type', 'Unknown')\n                incident_types[incident_type] = incident_types.get(incident_type, 0) + 1\n            \n            if incident_types:\n                ax.bar(incident_types.keys(), incident_types.values())\n                ax.set_title('Security Incidents by Type', fontsize=16, fontweight='bold')\n                ax.set_xlabel('Incident Type')\n                ax.set_ylabel('Count')\n                ax.tick_params(axis='x', rotation=45)\n            else:\n                ax.text(0.5, 0.5, 'No security incidents recorded', ha='center', va='center')\n                ax.set_title('Security Incidents', fontsize=16, fontweight='bold')\n        else:\n            ax.text(0.5, 0.5, 'No security incidents recorded', ha='center', va='center')\n            ax.set_title('Security Incidents', fontsize=16, fontweight='bold')\n        \n        plt.tight_layout()\n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    def _create_performance_page(self, pdf: PdfPages, report_data: Dict[str, Any]):\n        \"\"\"Create system performance page.\"\"\"\n        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=self.config['figure_size'])\n        \n        performance_data = report_data.get('performance_metrics', {})\n        \n        # Response time trend\n        response_times = performance_data.get('response_times', [])\n        if response_times:\n            timestamps = [rt['timestamp'] for rt in response_times]\n            times = [rt['response_time'] for rt in response_times]\n            ax1.plot(timestamps, times)\n            ax1.set_title('Response Time Trend')\n            ax1.set_ylabel('Response Time (ms)')\n            plt.setp(ax1.xaxis.get_majorticklabels(), rotation=45)\n        else:\n            ax1.text(0.5, 0.5, 'No response time data', ha='center', va='center')\n            ax1.set_title('Response Time Trend')\n        \n        # System resource usage\n        resource_usage = performance_data.get('resource_usage', {})\n        if resource_usage:\n            resources = list(resource_usage.keys())\n            usage = list(resource_usage.values())\n            ax2.bar(resources, usage)\n            ax2.set_title('System Resource Usage')\n            ax2.set_ylabel('Usage (%)')\n        else:\n            ax2.text(0.5, 0.5, 'No resource data', ha='center', va='center')\n            ax2.set_title('System Resource Usage')\n        \n        # Error rates\n        error_rates = performance_data.get('error_rates', {})\n        if error_rates:\n            errors = list(error_rates.keys())\n            rates = list(error_rates.values())\n            ax3.bar(errors, rates)\n            ax3.set_title('Error Rates')\n            ax3.set_ylabel('Error Count')\n            ax3.tick_params(axis='x', rotation=45)\n        else:\n            ax3.text(0.5, 0.5, 'No error data', ha='center', va='center')\n            ax3.set_title('Error Rates')\n        \n        # System health score\n        health_score = performance_data.get('health_score', 0)\n        ax4.bar(['System Health'], [health_score], color='green' if health_score > 80 else 'orange' if health_score > 60 else 'red')\n        ax4.set_title('System Health Score')\n        ax4.set_ylabel('Score (%)')\n        ax4.set_ylim(0, 100)\n        \n        plt.tight_layout()\n        pdf.savefig(fig, bbox_inches='tight')\n        plt.close(fig)\n    \n    async def _generate_interactive_charts(self, report_data: Dict[str, Any]) -> Dict[str, str]:\n        \"\"\"Generate interactive charts for HTML report.\"\"\"\n        charts = {}\n        \n        access_data = report_data.get('access_logs', [])\n        \n        if access_data:\n            # Access timeline\n            charts['timeline'] = self.chart_generator.generate_access_timeline(\n                access_data, '24h', 'plotly'\n            )\n            \n            # Success rate\n            charts['success_rate'] = self.chart_generator.generate_access_success_rate(\n                access_data, 'plotly'\n            )\n            \n            # Location usage\n            charts['location_usage'] = self.chart_generator.generate_location_usage_chart(\n                access_data, 'plotly'\n            )\n            \n            # Activity heatmap\n            charts['activity_heatmap'] = self.chart_generator.generate_person_activity_heatmap(\n                access_data, 'plotly'\n            )\n            \n            # Confidence distribution\n            charts['confidence_distribution'] = self.chart_generator.generate_recognition_confidence_distribution(\n                access_data, 'plotly'\n            )\n        \n        return charts\n    \n    def _create_html_template(self, report_data: Dict[str, Any], charts: Dict[str, str]) -> str:\n        \"\"\"Create HTML template for report.\"\"\"\n        summary = report_data.get('summary', {})\n        \n        html_content = f\"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Face Recognition System Report</title>\n    <meta charset=\"utf-8\">\n    <style>\n        body {{ font-family: Arial, sans-serif; margin: 20px; }}\n        .header {{ text-align: center; margin-bottom: 30px; }}\n        .summary {{ background-color: #f5f5f5; padding: 20px; margin-bottom: 30px; border-radius: 5px; }}\n        .chart-container {{ margin-bottom: 40px; }}\n        .chart-title {{ font-size: 18px; font-weight: bold; margin-bottom: 10px; }}\n        .metrics {{ display: flex; justify-content: space-around; margin-bottom: 30px; }}\n        .metric {{ text-align: center; }}\n        .metric-value {{ font-size: 24px; font-weight: bold; color: #2c3e50; }}\n        .metric-label {{ font-size: 14px; color: #7f8c8d; }}\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Face Recognition System Report</h1>\n        <h2>{report_data.get('period', 'Custom Period')}</h2>\n        <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>\n    </div>\n    \n    <div class=\"summary\">\n        <h3>Report Summary</h3>\n        <div class=\"metrics\">\n            <div class=\"metric\">\n                <div class=\"metric-value\">{summary.get('total_attempts', 0):,}</div>\n                <div class=\"metric-label\">Total Attempts</div>\n            </div>\n            <div class=\"metric\">\n                <div class=\"metric-value\">{summary.get('success_rate', 0):.1f}%</div>\n                <div class=\"metric-label\">Success Rate</div>\n            </div>\n            <div class=\"metric\">\n                <div class=\"metric-value\">{summary.get('unique_persons', 0):,}</div>\n                <div class=\"metric-label\">Unique Persons</div>\n            </div>\n            <div class=\"metric\">\n                <div class=\"metric-value\">{summary.get('avg_confidence', 0):.2f}</div>\n                <div class=\"metric-label\">Avg Confidence</div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"chart-container\">\n        <div class=\"chart-title\">Access Activity Timeline</div>\n        {charts.get('timeline', '<p>No timeline data available</p>')}\n    </div>\n    \n    <div class=\"chart-container\">\n        <div class=\"chart-title\">Access Success Rate</div>\n        {charts.get('success_rate', '<p>No success rate data available</p>')}\n    </div>\n    \n    <div class=\"chart-container\">\n        <div class=\"chart-title\">Location Usage</div>\n        {charts.get('location_usage', '<p>No location data available</p>')}\n    </div>\n    \n    <div class=\"chart-container\">\n        <div class=\"chart-title\">Activity Heatmap</div>\n        {charts.get('activity_heatmap', '<p>No activity data available</p>')}\n    </div>\n    \n    <div class=\"chart-container\">\n        <div class=\"chart-title\">Recognition Confidence Distribution</div>\n        {charts.get('confidence_distribution', '<p>No confidence data available</p>')}\n    </div>\n    \n</body>\n</html>\n\"\"\"\n        \n        return html_content\n    \n    # Helper methods for PNG report\n    \n    def _plot_access_timeline(self, ax, report_data):\n        \"\"\"Plot access timeline for PNG report.\"\"\"\n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\n            hourly_data = df.set_index('timestamp').resample('H').size()\n            ax.plot(hourly_data.index, hourly_data.values)\n            ax.set_title('Access Timeline')\n            ax.tick_params(axis='x', rotation=45)\n        else:\n            ax.text(0.5, 0.5, 'No data', ha='center', va='center')\n            ax.set_title('Access Timeline')\n    \n    def _plot_success_rate_pie(self, ax, report_data):\n        \"\"\"Plot success rate pie chart for PNG report.\"\"\"\n        summary = report_data.get('summary', {})\n        success = summary.get('successful_attempts', 0)\n        failed = summary.get('failed_attempts', 0)\n        \n        if success + failed > 0:\n            ax.pie([success, failed], labels=['Success', 'Failed'], \n                  colors=['#2ca02c', '#d62728'], autopct='%1.1f%%')\n        else:\n            ax.text(0.5, 0.5, 'No data', ha='center', va='center')\n        ax.set_title('Success Rate')\n    \n    def _plot_location_usage(self, ax, report_data):\n        \"\"\"Plot location usage for PNG report.\"\"\"\n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            location_counts = df['location_name'].value_counts().head(5)\n            ax.bar(range(len(location_counts)), location_counts.values)\n            ax.set_title('Top Locations')\n            ax.set_xticks(range(len(location_counts)))\n            ax.set_xticklabels([name[:10] for name in location_counts.index], rotation=45)\n        else:\n            ax.text(0.5, 0.5, 'No data', ha='center', va='center')\n            ax.set_title('Top Locations')\n    \n    def _plot_hourly_activity(self, ax, report_data):\n        \"\"\"Plot hourly activity for PNG report.\"\"\"\n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\n            hourly_counts = df['timestamp'].dt.hour.value_counts().sort_index()\n            ax.bar(hourly_counts.index, hourly_counts.values)\n            ax.set_title('Hourly Activity')\n            ax.set_xlabel('Hour')\n        else:\n            ax.text(0.5, 0.5, 'No data', ha='center', va='center')\n            ax.set_title('Hourly Activity')\n    \n    def _plot_weekly_heatmap(self, ax, report_data):\n        \"\"\"Plot weekly heatmap for PNG report.\"\"\"\n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\n            df['hour'] = df['timestamp'].dt.hour\n            df['day'] = df['timestamp'].dt.day_name()\n            \n            heatmap_data = df.groupby(['day', 'hour']).size().unstack(fill_value=0)\n            day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n            heatmap_data = heatmap_data.reindex(day_order)\n            \n            sns.heatmap(heatmap_data, ax=ax, cmap='Blues', cbar=False)\n            ax.set_title('Weekly Activity Heatmap')\n        else:\n            ax.text(0.5, 0.5, 'No data', ha='center', va='center')\n            ax.set_title('Weekly Activity Heatmap')\n    \n    def _plot_key_metrics(self, ax, report_data):\n        \"\"\"Plot key metrics for PNG report.\"\"\"\n        summary = report_data.get('summary', {})\n        metrics = {\n            'Total': summary.get('total_attempts', 0),\n            'Success': summary.get('successful_attempts', 0),\n            'Failed': summary.get('failed_attempts', 0)\n        }\n        \n        ax.bar(metrics.keys(), metrics.values())\n        ax.set_title('Key Metrics')\n        ax.set_ylabel('Count')\n    \n    def _plot_top_persons(self, ax, report_data):\n        \"\"\"Plot top persons for PNG report.\"\"\"\n        access_data = report_data.get('access_logs', [])\n        if access_data:\n            df = pd.DataFrame(access_data)\n            person_counts = df['person_name'].value_counts().head(5)\n            ax.barh(range(len(person_counts)), person_counts.values)\n            ax.set_title('Top Persons')\n            ax.set_yticks(range(len(person_counts)))\n            ax.set_yticklabels([name[:15] for name in person_counts.index])\n        else:\n            ax.text(0.5, 0.5, 'No data', ha='center', va='center')\n            ax.set_title('Top Persons')\n    \n    def _plot_system_health(self, ax, report_data):\n        \"\"\"Plot system health for PNG report.\"\"\"\n        performance = report_data.get('performance_metrics', {})\n        health_score = performance.get('health_score', 85)\n        \n        ax.bar(['Health'], [health_score], \n              color='green' if health_score > 80 else 'orange' if health_score > 60 else 'red')\n        ax.set_title('System Health')\n        ax.set_ylabel('Score (%)')\n        ax.set_ylim(0, 100)"